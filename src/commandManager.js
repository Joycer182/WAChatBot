import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import whatsapp from 'whatsapp-web.js';
import config from './config.js';
import { getBcvRates } from './bcvScraper.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class CommandManager {
    constructor(productManager, client) {
        this.commands = new Map();
        this.productManager = productManager; // Usar la instancia pasada
        this.client = client; // Guardar la instancia del cliente de WhatsApp
        this.clientStatesFilePath = path.join(__dirname, 'client_data.json');
        this.clientStates = this._loadClientStates(); // Carga los estados desde el archivo
        this.statsFilePath = path.join(__dirname, 'bot_stats.json');
        this.botStats = this._loadBotStats(); // Carga las estad√≠sticas del bot
        this.vendedoresFilePath = path.join(__dirname, 'vendedores.json');
        this.vendedores = this._loadVendedores(); // Carga los vendedores desde el archivo
        this.pendingApprovals = new Map(); // Almacena solicitudes de cambio de tipo de cliente pendientes
        this.lastQuote = new Map(); // Almacena la √∫ltima cotizaci√≥n por n√∫mero de contacto
        this.MAX_QUOTE_QUANTITY = parseInt(process.env.MAX_QUOTE_QUANTITY, 10) || 1000; // L√≠mite para diferenciar cantidad de c√≥digo
        this.clientTypes = {
            GENERAL: process.env.CLIENT_TYPE_GENERAL || 'general',
            TIENDA: process.env.CLIENT_TYPE_TIENDA || 'tienda',
            INSTALADOR: process.env.CLIENT_TYPE_INSTALADOR || 'instalador'
        };
        this.initializeCommands();
    }

    // Cargar los estados de los clientes desde un archivo JSON
    _loadClientStates() {
        try {
            if (fs.existsSync(this.clientStatesFilePath)) {
                const data = fs.readFileSync(this.clientStatesFilePath, 'utf8');
                const clientStatesObject = JSON.parse(data);
                console.log('Tipos de cliente cargados desde archivo.');
                return new Map(Object.entries(clientStatesObject));
            } else {
                console.log('No se encontr√≥ archivo de tipos de cliente. Se crear√° uno nuevo al primer uso.');
                return new Map();
            }
        } catch (error) {
            console.error('Error al cargar los tipos de cliente, iniciando con un mapa vac√≠o:', error);
            return new Map(); // En caso de error, empezar de cero para no bloquear el bot.
        }
    }

    // Cargar los vendedores desde un archivo JSON
    _loadVendedores() {
        try {
            if (fs.existsSync(this.vendedoresFilePath)) {
                const data = fs.readFileSync(this.vendedoresFilePath, 'utf8');
                const vendedoresObject = JSON.parse(data);
                // Convertir todas las claves (nombres de vendedores) a min√∫sculas para una b√∫squeda insensible a may√∫sculas/min√∫sculas
                const lowerCaseVendedores = Object.entries(vendedoresObject).map(([key, value]) => [key.toLowerCase(), value]);
                console.log('Vendedores cargados desde archivo.');
                return new Map(lowerCaseVendedores);
            } else {
                console.warn('No se encontr√≥ archivo de vendedores (vendedores.json). La funci√≥n /enviar no funcionar√°.');
                return new Map();
            }
        } catch (error) {
            console.error('Error al cargar los vendedores, iniciando con un mapa vac√≠o:', error);
            return new Map();
        }
    }

    // Cargar estad√≠sticas del bot desde un archivo JSON
    _loadBotStats() {
        try {
            if (fs.existsSync(this.statsFilePath)) {
                const data = fs.readFileSync(this.statsFilePath, 'utf8');
                const stats = JSON.parse(data);
                // Asegurarse de que todas las claves necesarias existan para evitar errores de NaN
                stats.totalQuotes = stats.totalQuotes || 0;
                stats.codigoQuotes = stats.codigoQuotes || 0;
                stats.divisasQuotes = stats.divisasQuotes || 0;
                stats.quoteHistory = stats.quoteHistory || []; // Asegurar que el historial exista
                console.log('Estad√≠sticas del bot cargadas desde archivo.');
                return stats;
            } else {
                console.log('No se encontr√≥ archivo de estad√≠sticas. Se crear√° uno nuevo.');
                return { totalQuotes: 0, codigoQuotes: 0, divisasQuotes: 0, quoteHistory: [] };
            }
        } catch (error) {
            console.error('Error al cargar las estad√≠sticas del bot, iniciando con valores por defecto:', error);
            return { totalQuotes: 0, codigoQuotes: 0, divisasQuotes: 0, quoteHistory: [] };
        }
    }

    // Guardar los estados de los clientes en el archivo JSON
    _saveClientStates() {
        try {
            const clientStatesObject = Object.fromEntries(this.clientStates);
            fs.writeFileSync(this.clientStatesFilePath, JSON.stringify(clientStatesObject, null, 2));
        } catch (error) {
            console.error('Error al guardar los tipos de cliente:', error);
        }
    }

    // Guardar las estad√≠sticas del bot en el archivo JSON
    _saveBotStats() {
        try {
            fs.writeFileSync(this.statsFilePath, JSON.stringify(this.botStats, null, 2));
        } catch (error) {
            console.error('Error al guardar las estad√≠sticas del bot:', error);
        }
    }

    // Incrementar el contador de cotizaciones
    _incrementQuoteCount(type) {
        this.botStats.totalQuotes = (this.botStats.totalQuotes || 0) + 1;
        if (type) {
            this.botStats[type] = (this.botStats[type] || 0) + 1;
            // Agregar registro al historial con marca de tiempo
            this.botStats.quoteHistory.push({
                type: type,
                timestamp: new Date().toISOString()
            });
        }
        this._saveBotStats();
        const typeCount = type ? this.botStats[type] : 'N/A';
        console.log(`üìà Cotizaci√≥n registrada. Total: ${this.botStats.totalQuotes}. Tipo: ${type || 'N/A'}. Total por tipo: ${typeCount}`);
    }

    // Inicializar todos los comandos
    initializeCommands() {
        this.registerCommand('help', this.handleHelp.bind(this));
        this.registerCommand('ayuda', this.handleHelp.bind(this));
        
        this.registerCommand('info', this.handleInfo.bind(this));
        this.registerCommand('informacion', this.handleInfo.bind(this));
        
        this.registerCommand('horario', this.handleHorarios.bind(this));
        this.registerCommand('horarios', this.handleHorarios.bind(this));
        
        this.registerCommand('producto', this.handleProductos.bind(this));
        this.registerCommand('productos', this.handleProductos.bind(this));

        this.registerCommand('categor√≠as', this.handleCategorias.bind(this));
        this.registerCommand('categor√≠a', this.handleCategorias.bind(this));
        this.registerCommand('categorias', this.handleCategorias.bind(this));
        this.registerCommand('categoria', this.handleCategorias.bind(this));
        
        this.registerCommand('buscar', this.handleBuscar.bind(this));
        this.registerCommand('search', this.handleBuscar.bind(this));
        
        // El comando principal para precios y cotizaciones ahora es /precio
        this.registerCommand('precio', this.handlePrecio.bind(this));
        this.registerCommand('precios', this.handlePrecio.bind(this));

        // El comando /codigo ahora muestra informaci√≥n general sobre precios (lo que antes hac√≠a /precios)
        this.registerCommand('codigo', this.handleCodigoInfo.bind(this));
        this.registerCommand('c√≥digo', this.handleCodigoInfo.bind(this));

        // Comandos de tipo de cliente (din√°micos desde .env)
        this.registerCommand(this.clientTypes.TIENDA.toLowerCase(), this.handleTienda.bind(this));
        this.registerCommand(this.clientTypes.INSTALADOR.toLowerCase(), this.handleInstalador.bind(this));
        this.registerCommand(this.clientTypes.GENERAL.toLowerCase(), this.handleGeneral.bind(this));
        
        // Comandos de administraci√≥n
        this.registerCommand('stats', this.handleStats.bind(this));

        this.registerCommand('divisa', this.handleDivisas.bind(this));
        this.registerCommand('divisas', this.handleDivisas.bind(this));

        this.registerCommand('enviar', this.handleEnviar.bind(this));

        this.registerCommand('foto', this.handleFoto.bind(this));
        this.registerCommand('imagen', this.handleFoto.bind(this));

        // Registrar comandos de aprobaci√≥n/rechazo para vendedores (movido dentro de initializeCommands)
        this.registerCommand('aprobar', this.handleAprobar.bind(this));
        this.registerCommand('rechazar', this.handleRechazar.bind(this));

        this.registerCommand('bcv', this.handleBcv.bind(this));

        // Nuevo comando para precios generales
        this.registerCommand('preciog', this.handlePrecioGeneral.bind(this));
    }

    // Registrar un comando
    registerCommand(command, handler) {
        this.commands.set(command.toLowerCase(), handler);
    }

    // Procesar comando
    async processCommand(message, contact) {
        const parts = message.body.trim().split(' ');
        const command = parts[0].substring(1).toLowerCase(); // Eliminar el "/" del inicio
        const args = parts.slice(1);

        const handler = this.commands.get(command);
        if (handler) {
            return await handler(args, contact);
        }

        // Si el comando no se encuentra, devuelve la ayuda directamente, pero con un mensaje de error.
        // Se utiliza una copia del manejador de ayuda para evitar un bucle si /ayuda no existiera.
        const helpMessage = await this.handleHelp([], contact); // Llama al manejador de ayuda
        return `‚ùå *Comando no reconocido*.\n\n${helpMessage}`; // Combina el mensaje de error con la ayuda
    }

    // Obtener tipo de cliente desde el contexto (puede ser mejorado con base de datos)
    getClientType(contact) {
        if (this.clientStates.has(contact.number)) {
            return this.clientStates.get(contact.number);
        }
        // Retorna el tipo de cliente por defecto si no se ha establecido uno
        return config.productos.defaultClientType;
    }
    
    // Verificar si un contacto es un vendedor
    isVendedor(contact) {
        return Array.from(this.vendedores.values()).includes(contact.number);
    }

    // Comando de ayuda
    async handleHelp(args, contact) {
        const clientType = this.getClientType(contact);
        
        return `ü§ñ *Bot de Atenci√≥n al Cliente*

*Comandos generales:*
*/ayuda* - Muestra este men√∫
*/info* - Informaci√≥n de contacto
*/horarios* - Horarios de atenci√≥n
*/bcv* - Muestra la tasa de cambio del BCV

*Comandos de productos:*
*/precio [c√≥digo]* - Informaci√≥n y cotizaci√≥n de producto(s)

*/buscar [t√©rmino]* - Buscar productos espec√≠ficos seg√∫n un t√©rmino

*Ejemplos:*
‚Ä¢ /buscar breaker
‚Ä¢ /precio 11050`;
    }

    // Comando de informaci√≥n
    async handleInfo(args, contact) {
        return `üìû *Informaci√≥n de Contacto*

üè¢ *Empresa:* ${config.empresa.nombre}

üìß *Email:* ${config.empresa.email}

üåê *Web:* ${config.empresa.web}

üìç *Direcci√≥n:* ${config.empresa.direccion}

*Horarios de atenci√≥n:*
*Lunes a Viernes:* ${config.horarios.lunesViernes}
*S√°bados:* ${config.horarios.sabados}
*Domingos:* ${config.horarios.domingos}`;
    }

    // Comando de horarios
    async handleHorarios(args, contact) {
        return `üïí *Horarios de Atenci√≥n*

*Lunes a Viernes:* ${config.horarios.lunesViernes}
*S√°bados:* ${config.horarios.sabados}
*Domingos:* ${config.horarios.domingos}`;
    }

    // Comando de productos
    async handleProductos(args, contact) {
        const clientType = this.getClientType(contact);
        const stats = this.productManager.getStats();
        
        return `üõçÔ∏è *Cat√°logo de Productos* *v${process.env.CATALOG_VERSION || '1.0'}*

üìä *Estad√≠sticas:*
‚Ä¢ Total de productos: ${stats.totalProductos}
‚Ä¢ Categor√≠as disponibles: ${stats.categorias}

*Comandos √∫tiles:*
/buscar *t√©rmino* - Buscar productos espec√≠ficos seg√∫n un t√©rmino

/precio *c√≥digo* - Ver producto por c√≥digo`;
    }

    // Comando de categor√≠as
    async handleCategorias(args, contact) {
        const categories = this.productManager.getCategories();
        
        if (categories.length === 0) {
            return `üìÇ *Categor√≠as de Productos*

No hay categor√≠as disponibles en este momento.

Usa /productos para ver m√°s informaci√≥n.`;
        }

        let response = `üìÇ *Categor√≠as de Productos*\n\n`;
        categories.forEach((category, index) => {
            response += `${index + 1}Ô∏è‚É£ *${category}*\n`;
        });

        response += `\n*Para ver productos de una categor√≠a:*
/buscar *Nombre de Categor√≠a*

*Ejemplo:* /buscar protectores`;
        
        return response;
    }

    // Comando de b√∫squeda
    async handleBuscar(args, contact) {
        if (args.length === 0) {
            return `üîç *B√∫squeda de Productos*

Para buscar productos, escribe:
/buscar *t√©rmino de b√∫squeda*

*Ejemplos:*
/buscar breaker
/buscar protector
/buscar wifi`;
        }

        const searchTerm = args.join(' ');
        const results = this.productManager.searchProducts(searchTerm);
        const clientType = this.getClientType(contact);

        if (results.length === 0) {
            return `üîç *B√∫squeda: "${searchTerm}"*

No se encontraron productos que coincidan con tu b√∫squeda.

*Sugerencias:*
‚Ä¢ Verifica la ortograf√≠a
‚Ä¢ Usa t√©rminos m√°s generales
‚Ä¢ Usa /categorias para ver las categor√≠as de los productos disponibles`;
        }

        let response = `üîç *B√∫squeda: "${searchTerm}"*\n\n`;
        response += `*Encontrados ${results.length} producto(s):*\n\n`;

        results.slice(0, 10).forEach((product, index) => {
            const productInfo = this.productManager.getProductInfo(product, clientType);
            response += `${index + 1}Ô∏è‚É£ *${productInfo.codigo}* - ${productInfo.descripcion}\n`;
            response += `   üìÇ ${productInfo.categoria} | üí∞ ${productInfo.precio}\n\n`;
        });

        if (results.length > 10) {
            response += `... y ${results.length - 10} producto(s) m√°s.\n\n`;
        }

        response += `*Para ver detalles completos:*
/precio [c√≥digo del producto]`;
        
        return response;
    }

    // Manejador para cotizaciones de m√∫ltiples productos (puede recibir un tipo de cliente forzado)
    async _handleMultiProductQuote(args, contact, clientTypeOverride = null) {
        const clientType = clientTypeOverride || this.getClientType(contact);
        // Limpiar argumentos, eliminando comas y espacios extra
        const cleanArgs = args.join(' ').replace(/,/g, ' ').split(' ').filter(Boolean);

        const items = [];
        const invalidFormatItems = [];
        let i = 0;
        while (i < cleanArgs.length) {
            const currentArg = cleanArgs[i];

            // El argumento actual debe ser un c√≥digo de producto v√°lido (num√©rico).
            if (isNaN(parseInt(currentArg))) {
                invalidFormatItems.push(`"${currentArg}" (no es un c√≥digo v√°lido)`);
                i++;
                continue;
            }

            const code = currentArg;
            let quantity = 1;

            if (i + 1 < cleanArgs.length) {
                const nextArg = cleanArgs[i + 1];
                const nextArgAsInt = parseInt(nextArg);

                // Si el siguiente argumento es un n√∫mero y es <= MAX_QUOTE_QUANTITY, se considera una cantidad.
                if (!isNaN(nextArgAsInt) && nextArgAsInt <= this.MAX_QUOTE_QUANTITY) {
                    quantity = nextArgAsInt;
                    i++; // Avanzar el √≠ndice para saltar el n√∫mero de cantidad.
                } else if (isNaN(nextArgAsInt)) {
                    // Si el siguiente argumento NO es un n√∫mero, es un error de formato para el c√≥digo actual.
                    // No se asume cantidad 1, se descarta el item.
                    invalidFormatItems.push(`"${code}" (cantidad inv√°lida: "${nextArg}")`);
                    i += 2; // Saltamos tanto el c√≥digo como la cantidad inv√°lida.
                    continue;
                }
                // Si el siguiente argumento es un n√∫mero pero > MAX_QUOTE_QUANTITY, se asume que es el siguiente c√≥digo
                // y la cantidad para el c√≥digo actual es 1 (comportamiento por defecto).
            }

            items.push({ code, quantity });
            i++;
        }

        if (items.length === 0 && invalidFormatItems.length === 0) {
            return `üìù *Cotizaci√≥n R√°pida*\n\nNo se especificaron productos.`;
        }

        // Se ajusta el mensaje para indicar el tipo de cliente si no es el por defecto o si se forz√≥.
        let response = `üìù *Cotizaci√≥n R√°pida*\n\n`;
        let grandTotal = 0;
        let notFoundItems = [];

        for (const item of items) {
            const product = this.productManager.getProductByCode(item.code);
            if (product) {
                const unitPrice = this.productManager.getRawPrice(product, clientType);
                const subTotal = unitPrice * item.quantity;
                grandTotal += subTotal;

                const formattedUnitPrice = this.productManager.getFormattedPrice(product, clientType);
                const formattedSubTotal = `$${subTotal.toFixed(2)}`; // Asegurar 2 decimales

                response += `*Producto:* ${product.descripcion}\n`;
                response += `*C√≥digo:* ${item.code}\n`;
                response += `*Cantidad:* ${item.quantity}\n`;
                response += `*Precio Unitario:* ${formattedUnitPrice}\n`;
                response += `*Subtotal:* ${formattedSubTotal}\n\n`;
            } else {
                notFoundItems.push(item.code);
            }
        }

        response += `---------------------------------------\n`;
        response += `*Total de la Cotizaci√≥n: $${grandTotal.toFixed(2)}*\n`;
        response += `---------------------------------------\n\n`;

        if (invalidFormatItems.length > 0) {
            response += `‚ö†Ô∏è *Argumentos con formato inv√°lido (ignorados):*\n‚Ä¢ ${invalidFormatItems.join('\n‚Ä¢ ')}\n\n`;
        }
        if (notFoundItems.length > 0) {
            response += `‚ö†Ô∏è *Productos no encontrados:*\n${notFoundItems.join(', ')}\n\n`;
        }

        response += `Los Precios *NO INCLUYEN IVA*\n\nUsamos la tasa de Cambio del *BCV*`;

        // Guardar la cotizaci√≥n para poder enviarla luego
        this.lastQuote.set(contact.number, response);

        // Incrementar el contador de cotizaciones si se encontr√≥ al menos un producto
        if (items.length > 0 && items.some(item => this.productManager.getProductByCode(item.code))) {
            this._incrementQuoteCount('codigoQuotes');
        }

        return response;
    }

    // Manejador para cotizaciones de m√∫ltiples productos en divisas (sin multiplicador, puede recibir un tipo de cliente forzado)
    async _handleMultiDivisaQuote(args, contact, clientTypeOverride = null) {
        const clientType = clientTypeOverride || this.getClientType(contact);
        const cleanArgs = args.join(' ').replace(/,/g, ' ').split(' ').filter(Boolean);

        const items = [];
        const invalidFormatItems = [];
        let i = 0;
        while (i < cleanArgs.length) {
            const currentArg = cleanArgs[i];

            // El argumento actual debe ser un c√≥digo de producto v√°lido (num√©rico).
            if (isNaN(parseInt(currentArg))) {
                invalidFormatItems.push(`"${currentArg}" (no es un c√≥digo v√°lido)`);
                i++;
                continue;
            }

            const code = currentArg;
            let quantity = 1;

            if (i + 1 < cleanArgs.length) {
                const nextArg = cleanArgs[i + 1];
                const nextArgAsInt = parseInt(nextArg);

                // Si el siguiente argumento es un n√∫mero y es <= MAX_QUOTE_QUANTITY, se considera una cantidad.
                if (!isNaN(nextArgAsInt) && nextArgAsInt <= this.MAX_QUOTE_QUANTITY) {
                    quantity = nextArgAsInt;
                    i++; // Avanzar el √≠ndice para saltar el n√∫mero de cantidad.
                } else if (isNaN(nextArgAsInt)) {
                    // Si el siguiente argumento NO es un n√∫mero, es un error de formato para el c√≥digo actual.
                    invalidFormatItems.push(`"${code}" (cantidad inv√°lida: "${nextArg}")`);
                    i += 2; // Saltamos tanto el c√≥digo como la cantidad inv√°lida.
                    continue;
                }
            }

            items.push({ code, quantity });
            i++;
        }

        if (items.length === 0 && invalidFormatItems.length === 0) {
            return `üí± *Cotizaci√≥n en Divisas*\n\nNo se especificaron productos.`;
        }

        let response = `üí± *Cotizaci√≥n Especial*\n\n`;
        let grandTotal = 0;
        let notFoundItems = [];

        for (const item of items) {
            const product = this.productManager.getProductByCode(item.code);
            if (product) {
                const unitPrice = this.productManager.getBasePrice(product, clientType);
                const subTotal = unitPrice * item.quantity;
                grandTotal += subTotal;

                response += `*Producto:* ${product.descripcion}\n`;
                response += `*C√≥digo:* ${item.code}\n`;
                response += `*Cantidad:* ${item.quantity}\n`;
                response += `*Precio Especial Unitario:* $${unitPrice.toFixed(2)}\n`;
                response += `*Subtotal:* $${subTotal.toFixed(2)}\n\n`;
            } else {
                notFoundItems.push(item.code);
            }
        }

        if (clientTypeOverride) {
            response += `*Precios calculados para tipo de cliente:* ${clientType.toUpperCase()}\n\n`;
        }

        response += `---------------------------------------\n*Total de la Cotizaci√≥n: $${grandTotal.toFixed(2)}*\n---------------------------------------\n\n`;
        if (invalidFormatItems.length > 0) response += `‚ö†Ô∏è *Argumentos inv√°lidos (ignorados):*\n‚Ä¢ ${invalidFormatItems.join('\n‚Ä¢ ')}\n\n`;
        if (notFoundItems.length > 0) response += `‚ö†Ô∏è *Productos no encontrados:*\n${notFoundItems.join(', ')}\n\n`;
        response += `Los Precios *NO INCLUYEN IVA*`;

        // Guardar la cotizaci√≥n para poder enviarla luego
        this.lastQuote.set(contact.number, response);

        // Incrementar el contador de cotizaciones si se encontr√≥ al menos un producto
        if (items.length > 0 && items.some(item => this.productManager.getProductByCode(item.code))) {
            this._incrementQuoteCount('divisasQuotes');
        }

        return response;
    }

    // Comando de precio por c√≥digo
    async handlePrecio(args, contact) {
        if (args.length === 0) {
            return `üîç *Consulta de Precios*

Para consultar el precio de un producto espec√≠fico, escribe:
/precio *C√≥digo Producto*

*Ejemplo:* /precio *11050*


Para cotizaciones r√°pidas, escribe:
/precio *C√≥digoProducto1, cantidad, C√≥digoProductoN, cantidad*

*Ejemplo:* /precio *11050 10000 3 10050 2*

Tambi√©n  puedes hacer la misma consulta de la siguiente manera:
/precio *C√≥digoProducto1 cantidad C√≥digoProductoN cantidad*

*Ejemplo:* /precio *11050 10000 3 10050 2*

*Para enviar la cotizaci√≥n a un vendedor:*
Despu√©s de hacer tu cotizaci√≥n, usa el comando: 
/enviar *Nombre del Vendedor*

*NOTAS:*
Se permiten m√°ximo 20 productos para la cotizaci√≥n r√°pida.
Si no se indica la cantidad, se asume que es 1.`;
        }

        // Se delega toda la l√≥gica de cotizaci√≥n a _handleMultiProductQuote
        return this._handleMultiProductQuote(args, contact, null);
    }

    // Comando de precio general
    async handlePrecioGeneral(args, contact) {
        const clientTypeGeneral = this.clientTypes.GENERAL;

        if (args.length === 0) {
            return `üîç *Consulta de Precios*

Para consultar el precio general de un producto, escribe:
/preciog *C√≥digo Producto*

*Ejemplo:* /preciog *11050*


Para cotizaciones r√°pidas, escribe:
/preciog *C√≥digoProducto1, cantidad, C√≥digoProductoN, cantidad*

*Ejemplo:* /preciog *11050 10000 3 10050 2*

Tambi√©n  puedes hacer la misma consulta de la siguiente manera:
/preciog *C√≥digoProducto1 cantidad C√≥digoProductoN cantidad*

*Ejemplo:* /preciog *11050 10000 3 10050 2*

*Para enviar la cotizaci√≥n a un vendedor:*
Despu√©s de hacer tu cotizaci√≥n, usa el comando: 
/enviar *Nombre del Vendedor*

*NOTAS:*
Se permiten m√°ximo 20 productos para la cotizaci√≥n r√°pida.
Si no se indica la cantidad, se asume que es 1.`;
        }

        // Se delega toda la l√≥gica de cotizaci√≥n a _handleMultiProductQuote, forzando el tipo de cliente a 'general'
        return this._handleMultiProductQuote(args, contact, clientTypeGeneral);
    }

    // Comando de precios
    async handleCodigoInfo(args, contact) {
        const clientType = this.getClientType(contact);
        const stats = this.productManager.getStats();
        
        return `üí∞ *Informaci√≥n de Precios*

*Tu tipo de cliente actual es:* ${clientType.toUpperCase()}

*Para consultar precios espec√≠ficos:*
*/precio *c√≥digo* - Ver precio de producto espec√≠fico

/buscar *t√©rmino* - Buscar productos espec√≠ficos seg√∫n un t√©rmino y sus precios`;
    }

    // --- Flujo de Aprobaci√≥n para Cambio de Tipo de Cliente ---

    async _requestClientTypeChange(contact, requestedType) {
        if (this.vendedores.size === 0) {
            return `‚ùå No hay vendedores configurados para aprobar tu solicitud. Por favor, contacta a soporte.`;
        }

        const clientNumber = contact.number;
        const clientName = contact.pushname || clientNumber;

        // Guardar la solicitud pendiente
        this.pendingApprovals.set(clientNumber, { requestedType, timestamp: Date.now() });

        const infoMessage = `*Solicitud de Cambio de Tipo de Cliente*

*Cliente:* ${clientName}
*N√∫mero:* ${clientNumber}
*Tipo Solicitado:* ${requestedType.toUpperCase()}`;

        const approveCommand = `/aprobar ${clientNumber} ${requestedType}`;
        const rejectCommand = `/rechazar ${clientNumber}`;

        // Enviar solicitud a todos los vendedores
        for (const [vendedorName, vendedorNumber] of this.vendedores.entries()) {
            try {
                const chatId = `${vendedorNumber}@c.us`;
                // Enviar mensajes por separado para facilitar el copiado y pegado
                await this.client.sendMessage(chatId, infoMessage);
                
                // Enviamos el comando de aprobaci√≥n en un mensaje separado
                const approveMsg = await this.client.sendMessage(chatId, approveCommand);
                // No necesitamos registrar el ID de este mensaje para el eco, ya que el vendedor lo copiar√°, no lo reenviar√°.

                // Enviamos el comando de rechazo en un mensaje separado
                const rejectMsg = await this.client.sendMessage(chatId, rejectCommand);

                console.log(`Solicitud de aprobaci√≥n enviada al vendedor ${vendedorName} en mensajes separados.`);
            } catch (error) {
                console.error(`Error al enviar mensajes de solicitud al vendedor ${vendedorName}:`, error);
            }
        }

        return `‚úÖ *Solicitud Enviada*

Tu solicitud para cambiar a tipo de cliente *${requestedType.toUpperCase()}* ha sido enviada a nuestros vendedores para su aprobaci√≥n.

Te notificaremos tan pronto como sea procesada.`;
    }

    async handleTienda(args, contact) {
        return this._requestClientTypeChange(contact, this.clientTypes.TIENDA);
    }

    async handleInstalador(args, contact) {
        return this._requestClientTypeChange(contact, this.clientTypes.INSTALADOR);
    }

    async handleGeneral(args, contact) {
        return this._requestClientTypeChange(contact, this.clientTypes.GENERAL);
    }

    async handleAprobar(args, contact) {
        if (!this.isVendedor(contact)) {
            return `‚ùå Este comando solo puede ser usado por vendedores autorizados.`;
        }

        if (args.length < 2) {
            return `Formato incorrecto. Usa: /aprobar <numero_cliente> <tipo_cliente>`;
        }

        const clientNumber = args[0];
        const newType = args[1].toLowerCase();
        const clientChatId = `${clientNumber}@c.us`;

        if (!this.pendingApprovals.has(clientNumber)) {
            return `‚ö†Ô∏è No hay una solicitud pendiente para el cliente ${clientNumber}, o ya fue procesada.`;
        }

        this.clientStates.set(clientNumber, newType);
        this._saveClientStates();
        this.pendingApprovals.delete(clientNumber); // Eliminar la solicitud pendiente

        const confirmationToClient = `üéâ ¬°Tu solicitud ha sido aprobada! üéâ\n\nAhora tienes acceso a los precios de *${newType.toUpperCase()}*.`;
        await this.client.sendMessage(clientChatId, confirmationToClient);

        return `‚úÖ Solicitud del cliente ${clientNumber} aprobada. Se le ha asignado el tipo *${newType.toUpperCase()}*.`;
    }

    async handleRechazar(args, contact) {
        if (!this.isVendedor(contact)) {
            return `‚ùå Este comando solo puede ser usado por vendedores autorizados.`;
        }

        if (args.length < 1) {
            return `Formato incorrecto. Usa: /rechazar <numero_cliente>`;
        }

        const clientNumber = args[0];
        const clientChatId = `${clientNumber}@c.us`;

        if (!this.pendingApprovals.has(clientNumber)) {
            return `‚ö†Ô∏è No hay una solicitud pendiente para el cliente ${clientNumber}, o ya fue procesada.`;
        }

        this.pendingApprovals.delete(clientNumber); // Eliminar la solicitud pendiente

        const rejectionToClient = `Lo sentimos, tu solicitud de cambio de tipo de cliente ha sido rechazada. Por favor, contacta a un vendedor para m√°s informaci√≥n.`;
        await this.client.sendMessage(clientChatId, rejectionToClient);

        return `üö´ Solicitud del cliente ${clientNumber} ha sido rechazada y notificada.`;
    }

    // Comando de estad√≠sticas
    async handleStats(args, contact) {
        const stats = this.productManager.getStats();
        
        return `üìä *Estad√≠sticas del Sistema*

*Productos:*
‚Ä¢ Total de productos: ${stats.totalProductos}
‚Ä¢ Categor√≠as disponibles: ${stats.categorias}
*Cotizaciones:*
‚Ä¢ Total de cotizaciones: ${this.botStats.totalQuotes || 0}
  - V√≠a /precios: ${this.botStats.codigoQuotes || 0}
  - V√≠a /divisas: ${this.botStats.divisasQuotes || 0}
‚Ä¢ Registros en historial: ${this.botStats.quoteHistory ? this.botStats.quoteHistory.length : 0}

*Configuraci√≥n:*
‚Ä¢ Multiplicador de precios: ${stats.multiplicadorPrecio}x
‚Ä¢ √öltima actualizaci√≥n: ${stats.ultimaActualizacion ? stats.ultimaActualizacion.toLocaleString() : 'N/A'}

*Archivo Excel:*
‚Ä¢ Ruta: ${stats.archivoExcel}
‚Ä¢ Estado: ${stats.ultimaActualizacion ? 'Actualizado' : 'No disponible'}

*Comandos registrados:* ${this.commands.size}`;
    }

    // Comando de divisas (precio sin multiplicador)
    async handleDivisas(args, contact) {
        const clientType = this.getClientType(contact);

        // Restringir acceso a tiendas e instaladores
        if (clientType !== this.clientTypes.TIENDA && clientType !== this.clientTypes.INSTALADOR) {
            return `‚ùå *Acceso Denegado*\n\nEl comando /divisas NO est√° disponible para usted.`;
        }

        if (args.length === 0) {
            return `üí± *Consulta de Precios en Divisas*\n\nEste comando muestra el precio en divisas de un producto.\n\nPara consultar el precio de un producto espec√≠fico, escribe:\n/divisas *C√≥digo Producto*\n\n*Ejemplo:* /divisas *11050*\n\n\nPara cotizaciones r√°pidas, escribe:\n/divisas *C√≥digoProducto1, cantidad, C√≥digoProductoN, cantidad*\n\n*Ejemplo:* /divisas *11050, 10000, 3, 10050, 2*\n\nTambi√©n  puedes hacer la misma consulta de la siguiente manera:\n/divisas *C√≥digoProducto1 cantidad C√≥digoProductoN cantidad*\n\n*Ejemplo:* /divisas *11050 10000 3 10050 2*\n\n*Para enviar la cotizaci√≥n a un vendedor:*\nDespu√©s de hacer tu cotizaci√≥n, usa el comando: \n/enviar *Nombre del Vendedor*\n\n*NOTAS:*\nSe permiten m√°ximo 20 productos para la cotizaci√≥n r√°pida.\nSi no se indica la cantidad, se asume que es 1.`;
        }

        // Se delega toda la l√≥gica de cotizaci√≥n a _handleMultiDivisaQuote
        return this._handleMultiDivisaQuote(args, contact, null);
    }

    // Comando para enviar cotizaci√≥n a un vendedor
    async handleEnviar(args, contact) {
        if (args.length === 0) {
            const vendedoresDisponibles = Array.from(this.vendedores.keys()).join(', ');
            return `Para enviar tu √∫ltima cotizaci√≥n a un vendedor, escribe:\n/enviar *Nombre del Vendedor*\n\nVendedores disponibles: ${vendedoresDisponibles || 'Ninguno configurado'}`;
        }

        const vendedorName = args[0].toLowerCase();
        const vendedorNumber = this.vendedores.get(vendedorName);

        if (!vendedorNumber) {
            return `‚ùå Vendedor "${vendedorName}" no encontrado.`;
        }

        const lastQuote = this.lastQuote.get(contact.number);

        if (!lastQuote) {
            return `üìù No tienes una cotizaci√≥n reciente para enviar. Por favor, genera una cotizaci√≥n primero con el comando /precio.`;
        }

        const clientType = this.getClientType(contact);

        const messageToVendedor = `*Nueva Cotizaci√≥n Solicitada*\n\n*Cliente:* ${contact.pushname || contact.number}\n*N√∫mero:* ${contact.number}\n*Tipo de Cliente:* ${clientType.toUpperCase()}\n\n-----------------------------------\n${lastQuote}`;

        try {
            // El n√∫mero del vendedor debe estar en formato internacional con @c.us
            const chatId = `${vendedorNumber}@c.us`;
            const sentMessage = await this.client.sendMessage(chatId, messageToVendedor);
            
            // Devolver el ID del mensaje enviado para evitar que el bot reaccione a √©l
            this.lastQuote.delete(contact.number);
            return { response: `‚úÖ ¬°√âxito! Tu cotizaci√≥n ha sido enviada a *${vendedorName}*. Pronto se pondr√° en contacto contigo.`, sentMessageId: sentMessage.id._serialized };

        } catch (error) {
            console.error(`Error al enviar mensaje al vendedor ${vendedorName}:`, error);
            return `‚ùå Ocurri√≥ un error al intentar enviar la cotizaci√≥n. Por favor, intenta de nuevo m√°s tarde o contacta directamente al vendedor.`;
        }
    }

    // Comando para enviar una foto de un producto
    async handleFoto(args, contact) {
        if (args.length === 0) {
            return `üì∑ Para solicitar la foto de un producto, escribe:\n/foto *C√≥digo del Producto*\n\n*Ejemplo:* /foto 11050`;
        }

        const codigo = args[0];
        const product = this.productManager.getProductByCode(codigo);

        if (!product) {
            return `‚ùå Producto con c√≥digo "${codigo}" no encontrado.`;
        }

        // Define la ruta de la carpeta de im√°genes
        const imageDir = path.join(__dirname, 'product_images');
        const extensions = ['.jpg', '.jpeg', '.png'];
        let imagePath = null;

        // Busca la imagen con extensiones comunes
        for (const ext of extensions) {
            const potentialPath = path.join(imageDir, `${codigo}${ext}`);
            if (fs.existsSync(potentialPath)) {
                imagePath = potentialPath;
                break;
            }
        }

        if (!imagePath) {
            return `üñºÔ∏è Lo sentimos, no se encontr√≥ una imagen para el producto *${product.descripcion}* (C√≥digo: ${codigo}).`;
        }

        try {
            const { MessageMedia } = whatsapp;
            const media = MessageMedia.fromFilePath(imagePath);
            // Devolvemos un objeto que contiene tanto el medio como un pie de foto.
            return { media, caption: `üì∑ *${product.descripcion}*\n*C√≥digo:* ${codigo}` };
        } catch (error) {
            console.error(`Error al cargar la imagen para el producto ${codigo}:`, error);
            return `‚ùå Ocurri√≥ un error al intentar enviar la imagen. Por favor, contacta directamente al vendedor.`;
        }
    }

    // Comando para obtener la tasa del BCV
    async handleBcv(args, contact) {
        try {
            const { dolar, euro, lastUpdated } = await getBcvRates();

            let response = `üè¶ *Tasa de Cambio del BCV*\n\n`;

            if (dolar && dolar !== -1) {
                response += `üíµ *D√≥lar:* Bs. ${dolar.toFixed(2)}\n`;
            } else {
                response += `üíµ *D√≥lar:* No disponible\n`;
            }

            if (euro && euro !== -1) {
                response += `üí∂ *Euro:* Bs. ${euro.toFixed(2)}\n`;
            } else {
                response += `üí∂ *Euro:* No disponible\n`;
            }

            if (lastUpdated) {
                const updateDate = new Date(lastUpdated);
                const options = { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true, timeZone: 'America/Caracas' };
                response += `\n*Actualizado:* ${updateDate.toLocaleString('es-VE', options)}\n`;
            }
            
            response += `\nFuente: Banco Central de Venezuela (BCV)`

            return response;
        } catch (error) {
            console.error("Error al obtener las tasas del BCV:", error);
            return "‚ùå Ocurri√≥ un error al consultar las tasas de cambio. Por favor, intenta de nuevo m√°s tarde.";
        }
    }

    // Obtener lista de comandos disponibles
    getAvailableCommands() {
        return Array.from(this.commands.keys());
    }

    // Public method to set client type and save it
    setClientType(contactNumber, type) {
        this.clientStates.set(contactNumber, type);
        this._saveClientStates();
        console.log(`Tipo de cliente para ${contactNumber} establecido a ${type} y guardado.`);
    }
}

export default CommandManager;
